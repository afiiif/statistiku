importScripts("../v3.0/utils.js"),importScripts("https://cdnjs.cloudflare.com/ajax/libs/jstat/1.7.1/jstat.min.js");export const index=(t,e,n,a,l,r)=>{const o=Date.now();let i=l[t.y],s=Ô(e[0].length,i,t.g.length?`by <b>${l[t.g]}</b>`:""),c="";if(!1===(!e[a[t.y]].some(t=>null===t||isNaN(t))&&!r.find(e=>e[0]==l[t.y])&&ʹ(mean(e[a[t.y]],n))))return{error:`Invalid variable: <b class="text-warning">${l[t.y]}</b> contains non-numeric value`+shake("y")};e=msort(e,a[t.y]),n&&(n=e[a[t.weight]]);var h=["Normal","Uniform","Exponential"][t.a];if(t.g.length){var d=e[a[t.g]].unq();if(d.length>100)return{error:`Invalid group: <b class="text-warning">${l[t.g]}</b> contains more than 100 unique values`+shake("g")};var g=split(e,a[t.g]);c+='<div class="row">',g.forEach((e,n)=>{p=qq[h](e[a[t.y]],e[a[t.weight]]),c+=(n&&n%2==0?'</div><hr><div class="row">':"")+`<div class="col-sm-12 ${d[1]?"col-lg-6":""} ${n%2==1?"border-left":""}">`+(n%2==1?'<hr class="d-lg-none">':"")+`<h6>${h} Q-Q Plot of ${l[t.y]}</h6>`+highcharts(o+n,["qqplot"],`{\n\t\t\t\t\t\t\tseries: [\n\t\t\t\t\t\t\t\t{ showInLegend: false, type: 'line', color: '#ddd', lineWidth: 1, marker:{enabled:false}, data: [[${p[e[a[t.y]][0]]},${p[e[a[t.y]][0]]}],[${p[e[a[t.y]][e[0].length-1]]},${p[e[a[t.y]][e[0].length-1]]}]], enableMouseTracking: false },\n\t\t\t\t\t\t\t\t{ name: '<span class="fw-400">${l[t.g]}:</span> ${vlabel(d[n],r,l[t.g])}', data: ${JSON.stringify(e[a[t.y]].map(t=>[t,p[t]]))} },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tlegend: {enabled:true, verticalAlign:'top', align:'left', x:80, borderWidth:1, borderColor:'${colors[n%12]}'},\n\t\t\t\t\t\t\tyAxis:{title:{text:"Expected ${h} Value"}},\n\t\t\t\t\t\t\tplotOptions: {scatter: {marker: {fillColor: '${toRGBA(colors[n%12],.65)}'}}},\n\t\t\t\t\t\t}`)+"</div>"}),c+="</div>"+highchartsReflow(d.map((t,e)=>o+e))}else p=qq[h](e[a[t.y]],n),c+=`<h6>${h} Q-Q Plot of ${l[t.y]}</h6>`+highcharts(o,["qqplot"],`{\n\t\t\t\t\t\tseries: [\n\t\t\t\t\t\t\t{ type: 'line', color: '#ddd', lineWidth: 1, marker:{enabled:false}, data: [[${p[e[a[t.y]][0]]},${p[e[a[t.y]][0]]}],[${p[e[a[t.y]][e[0].length-1]]},${p[e[a[t.y]][e[0].length-1]]}]], enableMouseTracking: false },\n\t\t\t\t\t\t\t{ data: ${JSON.stringify(e[a[t.y]].map(t=>[t,p[t]]))} },\n\t\t\t\t\t\t],\n\t\t\t\t\t\tyAxis:{title:{text:"Expected ${h} Value"}},\n\t\t\t\t\t\tplotOptions: {scatter: {marker: {fillColor: toRGBA(colors.success, .65)}}},\n\t\t\t\t\t}`)+highchartsReflow([o]);return{title:"Q-Q Plot",vars:i,body:s+c}};const qq={Normal:(t,e)=>{let n=len(t,e),a=mean(t,e),l=sd(t,e),r={};return rank(t,e).forEach(t=>{r[t[0]]=ʺ(jStat.normal.inv((t[1]-.375)/(n+.25),a,l),a)}),r},Uniform:(t,e)=>{let n=len(t,e),a=mean(t,e),l=t.min(),r=t.max(),o={};return rank(t,e).forEach(t=>{o[t[0]]=ʺ(jStat.uniform.inv((t[1]-.375)/(n+.25),l,r),a)}),o},Exponential:(t,e)=>{let n=len(t,e),a=mean(t,e),l={};return rank(t,e).forEach(t=>{l[t[0]]=ʺ(jStat.exponential.inv((t[1]-.375)/(n+.25),1/a),a)}),l}};