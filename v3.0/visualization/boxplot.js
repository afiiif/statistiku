importScripts("../v3.0/utils.js");export const index=(t,a,i,r,e,o)=>{const l=Date.now();let s=t["y[]"].map(t=>e[t]).join(", "),n=ร(a[0].length,s,t.g.length?`by <b>${e[t.g]}</b>`:""),h=t["y[]"].map(t=>!a[r[t]].some(t=>null===t||isNaN(t))&&!o.find(a=>a[0]==e[t])&&สน(mean(a[r[t]],i))),m="";for(let a=0,i=h.length;a<i;a++)if(!1===h[a])return{error:`Invalid variable: <b class="text-warning">${e[t["y[]"][a]]}</b> contains non-numeric value`+shake("y[]")};if(t.g.length){var g=a[r[t.g]].unq();if(g.length>100)return{error:`Invalid group: <b class="text-warning">${e[t.g]}</b> contains more than 100 unique values`+shake("g")};t["y[]"].forEach((s,n)=>{var c=[],p=[];split(a,r[t.g]).forEach((t,a)=>{if(i){var e=msort([t[r[s]],i],0);c[a]=[e[0].min(),quartile(e[0],.25,e[1]),quartile(e[0],.5,e[1]),quartile(e[0],.75,e[1]),e[0].max()];let o=c[a][1]-1.5*(c[a][3]-c[a][1]),l=c[a][3]+1.5*(c[a][3]-c[a][1]);c[a]=[Math.max(o,c[a][0]),c[a][1],c[a][2],c[a][3],Math.min(l,c[a][4])],p.push(...t[r[s]].filter(t=>t<c[a][0]||t>c[a][4]).map(t=>[a,t]))}else{e=t[r[s]].sort((t,a)=>t>a?1:t<a?-1:0);c[a]=[e.min(),quartile(e,.25),quartile(e,.5),quartile(e,.75),e.max()];let i=c[a][1]-1.5*(c[a][3]-c[a][1]),o=c[a][3]+1.5*(c[a][3]-c[a][1]);c[a]=[Math.max(i,c[a][0]),c[a][1],c[a][2],c[a][3],Math.min(o,c[a][4])],p.push(...t[r[s]].filter(t=>t<c[a][0]||t>c[a][4]).map(t=>[a,t]))}c[a]=c[a].map(t=>Number(t.toFixed(Math.max(0,h[n]))))}),m+=(n?"<hr>":"")+`<h6>${e[s]} <span class="fw-300">by ${e[t.g]}</span></h6>`+highcharts(l+n,["boxplot"],`{\n\t\t\t\t\txAxis:{title:{text:"${e[t.g]}"},categories:${JSON.stringify(g.map((a,i)=>vlabel(g[i],o,e[t.g])))}},\n\t\t\t\t\tyAxis:{title:{text:"${e[s]}"}},\n\t\t\t\t\tseries: [\n\t\t\t\t\t\t{name: "${e[s]}", data: ${JSON.stringify(c)}, color: Highcharts.getOptions().colors[${n}], fillColor: toRGBA(Highcharts.getOptions().colors[${n}],.15) },\n\t\t\t\t\t\t{name: "Outliers", data: ${JSON.stringify(p)}, type: "scatter", color: Highcharts.getOptions().colors[${n}], marker: {fillColor:"white",lineWidth:1,lineColor:Highcharts.getOptions().colors[${n}]}, tooltip: {pointFormat:"Value: {point.y}"}},\n\t\t\t\t\t],\n\t\t\t\t}`)})}else m+='<div class="row">',t["y[]"].forEach((o,s)=>{if(i){var n=msort([a[r[o]],i],0),g=(c=[n[0].min(),quartile(n[0],.25,n[1]),quartile(n[0],.5,n[1]),quartile(n[0],.75,n[1]),n[0].max()])[1]-1.5*(c[3]-c[1]);ma=c[3]+1.5*(c[3]-c[1]),c=[Math.max(g,c[0]),c[1],c[2],c[3],Math.min(ma,c[4])],out=a[r[o]].filter(t=>t<c[0]||t>c[4]).map(t=>[0,t])}else{var c;n=a[r[o]].sort((t,a)=>t>a?1:t<a?-1:0),g=(c=[n.min(),quartile(n,.25),quartile(n,.5),quartile(n,.75),n.max()])[1]-1.5*(c[3]-c[1]);ma=c[3]+1.5*(c[3]-c[1]),c=[Math.max(g,c[0]),c[1],c[2],c[3],Math.min(ma,c[4])],out=a[r[o]].filter(t=>t<c[0]||t>c[4]).map(t=>[0,t])}c=c.map(t=>Number(t.toFixed(Math.max(0,h[s])))),m+=(s&&s%2==0?'</div><hr><div class="row">':"")+`<div class="col-sm-12 ${t["y[]"][1]?"col-lg-6":""} ${s%2==1?"border-left":""}">`+(s%2==1?'<hr class="d-lg-none">':"")+`<h6>${e[o]}</h6>`+highcharts(l+s,["boxplot"],`{\n\t\t\t\t\tyAxis:{title:{text:"${e[o]}"}},\n\t\t\t\t\tseries: [\n\t\t\t\t\t\t{name: "${e[o]}", data: ${JSON.stringify([c])}, color: Highcharts.getOptions().colors[${s}], fillColor: toRGBA(Highcharts.getOptions().colors[${s}],.15) },\n\t\t\t\t\t\t{name: "Outliers", data: ${JSON.stringify(out)}, type: "scatter", color: Highcharts.getOptions().colors[${s}], marker: {fillColor:"#fff",lineWidth:1,lineColor:Highcharts.getOptions().colors[${s}]}, tooltip: {pointFormat:"Value: {point.y}"}},\n\t\t\t\t\t],\n\t\t\t\t}`)+"</div>"}),m+="</div>";return{title:"Boxplot",vars:s,body:n+(m+=highchartsReflow(t["y[]"].map((t,a)=>l+a)))}};