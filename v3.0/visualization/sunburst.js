importScripts("../v3.0/utils.js");export const index=(t,e,n,r,l,a)=>{t["g[]"]=JSON.parse("["+t.gOrder+"]");const o=Date.now();let i=t["y[]"].map(t=>l[t]).join(", "),s=Ô(e[0].length,i,t["g[]"].length?`by <b>${t["g[]"].map(t=>l[t]).join(", ")}</b>`:""),h=t["y[]"].map(t=>!e[r[t]].some(t=>null===t||isNaN(t))&&!a.find(e=>e[0]==l[t])&&ʹ(mean(e[r[t]],n))),g="";var u=[],c=["Sum","Frequency"][t.a];for(let e=0,n=h.length;e<n;e++)if(!1===h[e])return{error:`Invalid variable: <b class="text-warning">${l[t["y[]"][e]]}</b> contains non-numeric value`+shake("y[]")};for(let n=0,a=t["g[]"].length;n<a;n++)if(u[n]=e[r[t["g[]"][n]]].unq(),u[n].length>100)return{error:`Invalid group: <b class="text-warning">${l[t["g[]"][n]]}</b> contains more than 100 unique values`+shake("g[]")};const p=[sum,len][t.a];for(var f=[],v=[],m=t["g[]"].length-1;m>=0;m--){let t=m?u.slice(0,-m):u;v.push(1===t.length?trans([combi(t)]):combi(t))}return v.forEach((n,o)=>{n.forEach((n,i)=>{let s=n.map((t,e)=>u[e].indexOf(t)),h=s.join("."),g=s.slice(0,-1).join(".");if(""===g&&(g="all"),o===v.length-1){let o=e.slice(0);n.forEach((e,n)=>{if(o){let l=trans(o).filter(l=>l[r[t["g[]"][n]]]===e);o=!!l.length&&trans(l)}}),o&&f.push({id:h,parent:g,name:vlabel(u[s.length-1][s[s.length-1]],a,l[t["g[]"][s.length-1]]),value:o})}else f.push({id:h,parent:g,name:vlabel(u[s.length-1][s[s.length-1]],a,l[t["g[]"][s.length-1]])})})}),t["y[]"].forEach((e,n)=>{let a=JSON.parse(JSON.stringify(f)).map((l,a)=>(l.value&&(l.value=ʺ(p(l.value[r[e]],l.value[r[t.weight]]),h[n])),l));a.push({id:"all",parent:"",name:c+" of "+l[e],color:"#fff"}),g+=(n?"<hr>":"")+`<h6>${l[e]}</h6>`+highcharts(o+n,[],`{\n\t\t\t\tchart: {\n\t\t\t\t\ttype: 'sunburst',\n\t\t\t\t\theight: ${350+75*t["g[]"].length},\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tformatter: function() {\n\t\t\t\t\t\treturn \`<b>\${this.point.name}</b>: \${Number(this.point.value.toFixed(8))}\`;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tseries: ${series(a)}\n\t\t\t}`)}),{title:"Sunburst",vars:i,body:s+(g+=highchartsReflow(t["y[]"].map((t,e)=>o+e)))}};const series=t=>JSON.stringify([{data:t,allowDrillToNode:!0,cursor:"pointer",dataLabels:{format:"{point.name}",filter:{property:"innerArcLength",operator:">",value:16}},levels:[{level:1,levelIsConstant:!1,dataLabels:{filter:{property:"outerArcLength",operator:">",value:64}}},{level:2,colorByPoint:!0},{level:3,colorVariation:{key:"brightness",to:-.5}},{level:4,colorVariation:{key:"brightness",to:.5}}]}]);