importScripts("../v3.0/utils.js");export const index=(t,e,a,n,i,r)=>{const s=Date.now();let l=i[t.x]+", "+i[t.y],o=ร(e[0].length,l,t.g.length?`by <b>${i[t.g]}</b>`:""),h=[t.x,t.y].map(t=>!e[n[t]].some(t=>null===t||isNaN(t))&&!r.find(e=>e[0]==i[t])&&สน(mean(e[n[t]],a))),c="";if(!1===h[0])return{error:`Invalid X axis: <b class="text-warning">${i[t.x]}</b> contains non-numeric value`+shake("x")};if(!1===h[1])return{error:`Invalid Y axis: <b class="text-warning">${i[t.y]}</b> contains non-numeric value`+shake("y")};var m="";if(e[0].length>2e5?m="plotOptions:{scatter:{marker:{radius:1}}},":e[0].length>5e4?m="plotOptions:{scatter:{marker:{radius:1.5}}},":e[0].length>1e4?m="plotOptions:{scatter:{marker:{radius:2}}},":e[0].length>2500?m="plotOptions:{scatter:{marker:{radius:2.5}}},":e[0].length>1e3?m="plotOptions:{scatter:{marker:{radius:3}}},":e[0].length>250&&(m="plotOptions:{scatter:{marker:{radius:3.5}}},"),t["a[]"].length&&(t["a[]"]=t["a[]"].filter(e=>e!==t.x&&e!==t.y)),t.g.length){var d=e[n[t.g]].unq();if(d.length>100)return{error:`Invalid group: <b class="text-warning">${i[t.g]}</b> contains more than 100 unique values`+shake("g")};var x=split(e,n[t.g]),p=!!t["a[]"].length&&x.map(e=>trans(t["a[]"].map(t=>e[n[t]])).map(e=>e.map((e,a)=>i[t["a[]"][a]]+": <b>"+vlabel(e,r,i[t["a[]"][a]])+"</b><br>").join("")));c+=`<h6>${i[t.x]} vs ${i[t.y]} <span class="fw-300">by ${i[t.g]}</span></h6>`+gvar(`hc${s}_id`,p)+gvar(`hc${s}_meanX`,["mean",{color:"#777",id:"mean",width:2,value:mean(e[n[t.x]],a),dashStyle:"shortdash"}])+gvar(`hc${s}_meanY`,["mean",{color:"#777",id:"mean",width:2,value:mean(e[n[t.y]],a),dashStyle:"shortdash"}])+highcharts(s,["scatter"],`{\n\t\t\t\t\t\tseries: [\n\t\t\t\t\t\t\t${x.map((e,s)=>{var l=trans([e[n[t.x]],e[n[t.y]]]);return`{ data: ${JSON.stringify(l.map((i,r)=>({x:i[0],y:i[1],marker:{fillColor:toRGBA(colors[s%12],.6+.05*(a?e[n[t.weight]][r]:1))}})))}, name: "${vlabel(d[s],r,i[t.g])}" }`}).join(",")},\n\t\t\t\t\t\t\t{ type: 'line', visible: false, color: '#777', name: 'Overall Mean', dashStyle: 'shortdash', marker:{enabled:false}, events:{legendItemClick:function(e){if(this.visible){this.chart.xAxis[0].removePlotLine(hc${s}_meanX[0]);this.chart.yAxis[0].removePlotLine(hc${s}_meanY[0])}else{this.chart.xAxis[0].addPlotLine(hc${s}_meanX[1]);this.chart.yAxis[0].addPlotLine(hc${s}_meanY[1])}}} }\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttooltip: {formatter: function() {\n\t\t\t\t\t\t\treturn ${p?`hc${s}_id[this.series.index][this.point.index]+`:""} '${i[t.x]}: <b>'+this.point.x+'</b><br>${i[t.y]}: <b>'+this.point.y+'</b>'\n\t\t\t\t\t\t}},\n\t\t\t\t\t\txAxis:{title:{text:"${i[t.x]}"}},\n\t\t\t\t\t\tyAxis:{title:{text:"${i[t.y]}"}},\n\t\t\t\t\t\t${m}\n\t\t\t\t\t}`)}else{var $=trans([e[n[t.x]],e[n[t.y]]]);p=!!t["a[]"].length&&trans(t["a[]"].map(t=>e[n[t]])).map(e=>e.map((e,a)=>i[t["a[]"][a]]+": <b>"+vlabel(e,r,i[t["a[]"][a]])+"</b><br>").join(""));c+=`<h6>${i[t.x]} vs ${i[t.y]}</h6>`+gvar(`hc${s}_id`,p)+gvar(`hc${s}_meanX`,["mean",{color:"#777",id:"mean",width:2,value:mean(e[n[t.x]],a),dashStyle:"shortdash"}])+gvar(`hc${s}_meanY`,["mean",{color:"#777",id:"mean",width:2,value:mean(e[n[t.y]],a),dashStyle:"shortdash"}])+highcharts(s,["scatter"],`{\n\t\t\t\t\t\tseries: [\n\t\t\t\t\t\t\t{ showInLegend: false, data: ${a?JSON.stringify($.map((t,e)=>({x:t[0],y:t[1],marker:{fillColor:toRGBA(colors[0],.6+.05*a[e])}}))):JSON.stringify($)} },\n\t\t\t\t\t\t\t{ type: 'line', visible: false, color: '#777', name: 'Mean', dashStyle: 'shortdash', marker:{enabled:false}, events:{legendItemClick:function(e){if(this.visible){this.chart.xAxis[0].removePlotLine(hc${s}_meanX[0]);this.chart.yAxis[0].removePlotLine(hc${s}_meanY[0])}else{this.chart.xAxis[0].addPlotLine(hc${s}_meanX[1]);this.chart.yAxis[0].addPlotLine(hc${s}_meanY[1])}}} }\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttooltip: {formatter: function() {\n\t\t\t\t\t\t\treturn ${p?`hc${s}_id[this.point.index]+`:""} '${i[t.x]}: <b>'+this.point.x+'</b><br>${i[t.y]}: <b>'+this.point.y+'</b>'\n\t\t\t\t\t\t}},\n\t\t\t\t\t\txAxis:{title:{text:"${i[t.x]}"}},\n\t\t\t\t\t\tyAxis:{title:{text:"${i[t.y]}"}},\n\t\t\t\t\t\t${a?"":"plotOptions: {scatter: {marker: {fillColor: toRGBA(colors.success, .65)}}},"}\n\t\t\t\t\t\t${m}\n\t\t\t\t\t}`)}return{title:"Scatter Plot",vars:l,body:o+c}};