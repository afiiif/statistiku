importScripts("../v3.0/utils.js");export const index=(t,n,r,a,e,o)=>{const i=Date.now();let s=e[t.x]+", "+e[t.y]+", "+e[t.z],c=Ã”(n[0].length,s),h="";if(n[a[t.x]].some(t=>null===t||isNaN(t)))return{error:`Invalid X axis: <b class="text-warning">${e[t.x]}</b> contains non-numeric value`+shake("x")};if(n[a[t.y]].some(t=>null===t||isNaN(t)))return{error:`Invalid Y axis: <b class="text-warning">${e[t.y]}</b> contains non-numeric value`+shake("y")};if(n[a[t.z]].some(t=>null===t||isNaN(t)))return{error:`Invalid Z axis: <b class="text-warning">${e[t.z]}</b> contains non-numeric value`+shake("z")};t["a[]"].length&&(t["a[]"]=t["a[]"].filter(n=>n!==t.x&&n!==t.y&&n!==t.z));var d=trans([n[a[t.x]],n[a[t.y]],n[a[t.z]]]),l=!!t["a[]"].length&&trans(t["a[]"].map(t=>n[a[t]])).map(n=>n.map((n,r)=>e[t["a[]"][r]]+": <b>"+vlabel(n,o,e[t["a[]"][r]])+"</b><br>").join(""));return{title:"3D Scatter Plot",vars:s,body:c+(h+=alert("Drag with left mouse button to <b>zoom</b>. Drag with right mouse button to <b>rotate</b>.")+`<h6>${e[t.x]} vs ${e[t.y]} vs ${e[t.z]}</h6>`+gvar(`hc${i}_id`,l)+scatter3d(i,d,[e[t.x],e[t.y],e[t.z]],l)+highchartsReflow([i]))}};const scatter3d=(t,n,[r,a,e],o=!1)=>`\n\t<div id="hc-${t}" oncontextmenu="return false;"></div>\n\n\t<script>\n\n\t\tHighcharts.setOptions({\n\t\t\tcolors: Highcharts.getOptions().colors.map(function (color) {\n\t\t\t\treturn {\n\t\t\t\t\tradialGradient: { cx:.4, cy:.3, r:.5 },\n\t\t\t\t\tstops: [ [0, color], [1, Highcharts.Color(color).brighten(-.25).get('rgb')] ]\n\t\t\t\t};\n\t\t\t})\n\t\t});\n\n\t\tvar hc${t} = new Highcharts.Chart($.extend(true, {}, HC.scatter3d, {\n\t\t\tchart: { renderTo: 'hc-${t}' },\n\t\t\tseries: [{ colorByPoint: true, data: ${JSON.stringify(n)} }],\n\t\t\ttooltip: {formatter: function() {\n\t\t\t\treturn ${o?`hc${t}_id[this.point.index]+`:""} '${r}: <b>'+this.point.x+'</b><br>${a}: <b>'+this.point.y+'</b><br>${e}: <b>'+this.point.z+'</b>'\n\t\t\t}}\n\t\t}));\n\n\t\tHighcharts.setOptions({ colors: HighchartsColors });\n\n\t\t(function (H) {\n\n\t\t\tfunction dragStart(eStart) {\n\t\t\t\tif (eStart.buttons!==2) return false;\n\t\t\t\teStart = hc${t}.pointer.normalize(eStart);\n\t\t\t\tvar posX = eStart.chartX,\n\t\t\t\tposY = eStart.chartY,\n\t\t\t\talpha = hc${t}.options.chart.options3d.alpha,\n\t\t\t\tbeta = hc${t}.options.chart.options3d.beta,\n\t\t\t\tsensitivity = 5,  // lower is more sensitive\n\t\t\t\thandlers = [];\n\n\t\t\t\tfunction drag(e) {\n\t\t\t\t\te = hc${t}.pointer.normalize(e);\n\t\t\t\t\thc${t}.update({\n\t\t\t\t\t\tchart: {\n\t\t\t\t\t\t\toptions3d: {\n\t\t\t\t\t\t\t\talpha: alpha + (e.chartY - posY) / sensitivity,\n\t\t\t\t\t\t\t\tbeta: beta + (posX - e.chartX) / sensitivity\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, undefined, undefined, false);\n\t\t\t\t}\n\n\t\t\t\tfunction unbindAll() {\n\t\t\t\t\thandlers.forEach(function (unbind) { if (unbind) unbind(); });\n\t\t\t\t\thandlers.length = 0;\n\t\t\t\t}\n\n\t\t\t\thandlers.push(H.addEvent(document, 'mousemove', drag));\n\t\t\t\thandlers.push(H.addEvent(document, 'touchmove', drag));\n\t\t\t\thandlers.push(H.addEvent(document, 'mouseup', unbindAll));\n\t\t\t\thandlers.push(H.addEvent(document, 'touchend', unbindAll));\n\t\t\t}\n\t\t\tH.addEvent(hc${t}.container, 'mousedown', dragStart);\n\t\t\tH.addEvent(hc${t}.container, 'touchstart', dragStart);\n\n\t\t}(Highcharts));\n\n\t<\/script>`;